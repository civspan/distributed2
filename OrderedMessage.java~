
import mcgui.*;
import java.sql.Timestamp;
import java.util.*;

/**
 * Message implementation for ExampleCaster.
 *
 * @author Andreas Larsson &lt;larandr@chalmers.se&gt;
 */
public class OrderedMessage extends Message implements Comparable<OrderedMessage> {
        
    String text;
    int timestamp;
    boolean ack, sentAcks;
    int ackSender;
    int hosts;
    boolean[] ackArray;
    boolean isCrash = false;
    
   
    /**
     *  Constructor for message carrying object of class OrderedMessage
     *
     */   

    public OrderedMessage(int sender ,boolean isCrash){
      super(sender);      
      this.isCrash = isCrash;
    }
 
    public OrderedMessage(int sender, int ts, int hosts, String text) { 
        super(sender);
        this.text = text;
        this.hosts = hosts;
        ack = false;
        timestamp = ts;
        makeAckArray(sender);
        sentAcks = false;      
    }

    /**
     *  Constructor for acknowledgement object of class OrderedMessage
     *
     */    
    public OrderedMessage(int sender, int originalTimestamp, int hosts, int ackSender) {
        super(sender);
        this.ackSender = ackSender;
        this.hosts = hosts;
        timestamp = originalTimestamp;
        ack = true;
    }


    
     /**
     *  Creates an ack array. All elements are false excepts for 
     *  @param acker The only element set to true in the ack array. 
     */ 
    public void makeAckArray(int acker) {
        ackArray = new boolean[hosts];
        for(boolean elem : ackArray) 
            elem = false;
        ackArray[acker] = true;
    }
    
    
    /**
     * Returns the text of the message only. The toString method can
     * be implemented to show additional things useful for debugging
     * purposes.
     */
    public String getText() {
        return text;
    }
    
    public boolean isAck(){
        return ack;
    }
    
    /**
     * Checks if a message is acknowledged by all hosts.
     * Returns true if that is the case, otherwise false.
     */
    public boolean isAllAcked(){
        for(boolean ack : ackArray) {
            if(!ack)
                return false;
        }
        return true;
    }

    public int getSender() {
        return sender;
    }

    public boolean isCrashed(){
      return isCrash;
    }

    public int getAckSender(){
        return ackSender;
    }
    
    public void sentAcks(){
        sentAcks = true;
    }
    
    public boolean haveSentAcks(){
        return sentAcks;
    }

    public int getTimeStamp(){
        return timestamp;
    }

    public void setAckIndex(int idx) {
        //System.out.println("size of array: " + ackArray.length + 
          //  "\nindex: " + idx);
        ackArray[idx] = true;
    }
    
    public boolean getAckIndex(int idx) {
        return ackArray[idx];
    }

    public boolean[] getAckArray(){
        return ackArray;
    }

    public void setAckArray(boolean[] arr) {
        ackArray = arr.clone();
    }

    public String printMessage() {
        if(ack) {
        return ("\n{ Sender: " + sender  + "\nAck sender: " + ackSender +  "\nis ack: " + ack + "\ntimestamp: " 
            + timestamp + "\nackArray: " + Arrays.toString(ackArray) + "}");
        }
        return ("\n{ Sender: " + sender +  "\nis ack: " + ack + "\ntimestamp: " 
            + timestamp + "\nackArray: " + Arrays.toString(ackArray) + "}");
    }
    
    public String printMessage(int peer) {
        if(ack) {
        return ("\n{ Sender: " + sender + "\nTo: " + peer + "\nAck sender: " + ackSender +  "\nis ack: " + ack + "\ntimestamp: " 
            + timestamp + "\nackArray: " + Arrays.toString(ackArray) + "}");
        }
        return ("\n{ Sender: " + sender + "\nTo: " + peer +  "\nis ack: " + ack + "\ntimestamp: " 
            + timestamp + "\nackArray: " + Arrays.toString(ackArray) + "}");
    }

    

    /**
     * Compares two OrderedMessage objects. Breaks ties
     * in timestamp by id. Lower id first.
     */
    @Override
    public int compareTo(OrderedMessage msg) {

        if( msg.getTimeStamp() == (this.timestamp) ) {
            if(msg.getSender() < this.sender) 
              return 1;
            else if(msg.getSender() > this.sender)
                    return -1;      
                 else
                    return 0; // If timestamp and messages are the same, the objects are equal 
        }
        if(msg.getTimeStamp() < (this.timestamp))
            return 1;
        else
            return -1;
    }


    
    public static final long serialVersionUID = 0;
}
